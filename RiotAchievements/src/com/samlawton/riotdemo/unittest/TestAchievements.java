package com.samlawton.riotdemo.unittest;

import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.hsqldb.Server;
import org.junit.After;
import org.junit.BeforeClass;
import org.junit.Test;

import com.samlawton.riotdemo.achievements.StatAchievementUpdater;
import com.samlawton.riotdemo.game.Game;
import com.samlawton.riotdemo.game.InGamePlayer;
import com.samlawton.riotdemo.game.Player;

public class TestAchievements {
	
	private static Server hsqlServer = null;
	public static final String jdbcDriver = "org.hsqldb.jdbcDriver";
	public static final String jdbcString = "jdbc:hsqldb:mem:testdb";
	public static final String jdbcUser = "sa";
	public static final String jdbcPass = "";
	public static final String dbName = "testdb";
	public static final String[] jdbcParams = {jdbcDriver, jdbcString, jdbcUser, jdbcPass};
	
	@BeforeClass
	public static void setUp() {
		
		hsqlServer = new Server();

        // HSQLDB prints out a lot of informations when
        // starting and closing, which we don't need now.
        // Normally you should point the setLogWriter
        // to some Writer object that could store the logs.
        hsqlServer.setLogWriter(null);
        hsqlServer.setSilent(true);

        // The actual database will be named 'xdb' and its
        // settings and data will be stored in files
        // testdb.properties and testdb.script
        hsqlServer.setDatabaseName(0, dbName);
        hsqlServer.setDatabasePath(0, "file:"+dbName);

        // Start the database!
        hsqlServer.start();
        
		try {
			Connection createEnv = null;

			try {
				
				Class.forName(jdbcDriver);

				createEnv = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				createEnv.prepareStatement(
						"create table players ("
								+ "userName varchar(64) not null primary key, "
								+ "userCreateDate double, "
								+ "totalGames integer, "
								+ "totalWins integer, "
								+ "totalLosses integer, "
								+ "totalAtkAttempts integer, "
								+ "totalHitNum double, " 
								+ "totalDmg integer, "
								+ "totalKills integer, "
								+ "totalFirstHitKills integer, "
								+ "totalAssists integer, "
								+ "totalSpellsCast integer, "
								+ "totalSpellDmg integer, "
								+ "totalPlayTime double " + ");")
						.execute();
				
				createEnv.prepareStatement("create table games(gameID varchar(128) primary key," +
						"gameDate double," +
						"bluePlayerOne varchar(64)," +
						"bluePlayerTwo varchar(64)," +
						"bluePlayerThree varchar(64)," +
						"bluePlayerFour varchar(64)," +
						"bluePlayerFive varchar(64)," +
						"purplePlayerOne varchar(64)," +
						"purplePlayerTwo varchar(64)," +
						"purplePlayerThree varchar(64)," +
						"purplePlayerFour varchar(64)," +
						"purplePlayerFive varchar(64)," +
						"victor varchar(8)," +
						"loser varchar(8)," +
						"blueKills integer," +
						"purpleKills integer," +
						"blueAssists integer," +
						"purpleAssists integer," +
						"firstBloodTeam varchar(8)," +
						"firstBloodPlayer varchar(64)," +
						"gameLength double);").execute();
				
				createEnv.prepareStatement("create table gamesPlayed(gamesPlayedID integer generated by default as identity(start with 1, increment by 1) primary key," +
						"userName varchar(64) not null," +
						"gameID varchar(128) not null);").execute();
				
				createEnv.prepareStatement("create table playerAchievements(achieveID integer generated by default as identity(start with 1, increment by 1) primary key, " +
						"userName varchar(64) not null," +
						"ASharpshooter boolean," +
						"ABruiser boolean," +
						"AVeteran boolean," +
						"ABigWinner boolean)").execute();

			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				createEnv.close();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
		
		}

	}
	
	/**
	 * Creates a user then checks to see if it can be recalled 
	 * from the database.
	 */
	@Test
	public void testNewAndExistingPlayer() {
		
		// Creates new player and inserts into database
		Player testPlayer = new Player("TestUser", jdbcParams);

		try {
			Connection testConn = null;

			try {
				
				testConn = DriverManager.getConnection(jdbcString, jdbcUser, jdbcPass);
				
				/*
				 * Grabs userName column for the name that we entered in the Player
				 * instantiation above.
				 */ 
				ResultSet testRS = testConn.prepareStatement(
						"select userName from players where userName = 'TestUser'")
						.executeQuery();
				testRS.next();
				
				assertEquals("This should be the name we just entered.", "TestUser", testRS.getString(1));
				
				testRS.close();
				
				/*
				 * Creates a new player, but it should just be grabbing the old player.
				 * This will be proven if the create dates are the same.
				 */
				Player testDupPlayer = new Player("TestUser", jdbcParams);
				assertEquals("This date should be the same if the users are the same.", 
						testPlayer.getUserCreateDate(),
						testDupPlayer.getUserCreateDate());
				
				
			} catch (SQLException e) {
				System.out.println("Encountered some kind of SQL error (statement level): " + e.getMessage());
			} finally {
				testConn.close();
			}
			
		} catch (SQLException e) {
			System.out.println("Encountered some kind of SQL error (connection level): " + e.getMessage());
		} finally {
			
		}
		
	}
	
	@Test
	public void testUpdatePlayer() {
		
		Player testBluePlayer = new Player("TestBlueUpdatePlayer", jdbcParams);
		Player testPurplePlayer = new Player("TestPurpleUpdatePlayer", jdbcParams);
		
		ArrayList<Player> gamePlayers = new ArrayList<Player>();
		gamePlayers.add(testBluePlayer);
		gamePlayers.add(testPurplePlayer);
		
		Game testGame = new Game(gamePlayers,jdbcParams);
		
		assertEquals("Player 1 is not on Blue team.", testGame.getPlayerTeam(testBluePlayer), Game.BLUE_TEAM_IDX);
		assertEquals("Player 2 is not on Purple team.", testGame.getPlayerTeam(testPurplePlayer), Game.PURPLE_TEAM_IDX);
		
		testGame.runTestGame();
		
		StatAchievementUpdater testStatUpdater = new StatAchievementUpdater(testGame);
		testStatUpdater.updatesFromRecentGame(jdbcParams);
		
		try {
			
			Connection testConn = null;
			
			try {
				
				testConn = DriverManager.getConnection(jdbcString, jdbcUser, jdbcPass);
				
				ResultSet testRS = testConn.prepareStatement("select * from games where gameID = '" + testGame.getGameID() + "'").executeQuery();
				
				testRS.next();
				
				assertEquals("Blue Player 1 should be TestBlueUpdatePlayer.", "TestBlueUpdatePlayer", testRS.getString(Game.BLUE_PLAYER_ONE_IDX));
				assertEquals("Purple Player 1 should be TestPurpleUpdatePlayer.", "TestPurpleUpdatePlayer", testRS.getString(Game.PURPLE_PLAYER_ONE_IDX));
				
				testRS.close();
				
				testRS = testConn.prepareStatement("select count(*) from gamesPlayed").executeQuery();
				
				testRS.next();
				
				assertEquals("There should be exactly two entries: one game; two players.", 2, testRS.getInt(1));
				
				testRS.close();
				
			} catch (SQLException ex) {
				
			} finally {
				if (testConn != null) testConn.close();
			}
			
		} catch (SQLException ex) {
			
		}
		
		assertEquals("Blue team won last game.", testBluePlayer.getTotalWins(), 1);
		assertEquals("Purple team lost last game.", testPurplePlayer.getTotalWins(), 0);
		
		try {
			Connection testConn = null;

			try {
				
				testConn = DriverManager.getConnection(jdbcString, jdbcUser, jdbcPass);
				
				/*
				 * Grabs userName column for the name that we entered in the Player
				 * instantiation above.
				 */ 
				ResultSet testRS = testConn.prepareStatement(
						"select * from players where userName = 'TestBlueUpdatePlayer'")
						.executeQuery();
				testRS.next();
				
				assertEquals("This should be the name we just entered.", "TestBlueUpdatePlayer", testRS.getString(Player.NAME_IDX));
				assertEquals("This should be 10000, the length of the first Game.", 10000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX), 0.0);
				assertEquals("This should indicate a Victory, as above.", 1, testRS.getInt(Player.TOTAL_WINS_IDX));
				
				testRS.close();
				
				testRS = testConn.prepareStatement(
						"select * from players where userName = 'TestPurpleUpdatePlayer'")
						.executeQuery();
				testRS.next();
				
				assertEquals("This should be the name we just entered.", "TestPurpleUpdatePlayer", testRS.getString(Player.NAME_IDX));
				assertEquals("This should be 10000, the length of the first Game.", 10000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX), 0.0);
				assertEquals("This should indicate a Loss, as above.", 0, testRS.getInt(Player.TOTAL_WINS_IDX));
				
				testRS.close();
				
				
			} catch (SQLException e) {
				System.out.println("Encountered some kind of SQL error (statement level): " + e.getMessage());
			} finally {
				testConn.close();
			}
			
		} catch (SQLException e) {
			System.out.println("Encountered some kind of SQL error (connection level): " + e.getMessage());
		} finally {
			
		}
		
		/*
		 * And then we do the whole thing once more and update
		 * again!
		 */
		
		Game testGame2 = new Game(gamePlayers,jdbcParams);
		
		assertEquals("Player 1 is not on Blue team again.", testGame2.getPlayerTeam(testBluePlayer), Game.BLUE_TEAM_IDX);
		assertEquals("Player 2 is not on Purple team again.", testGame2.getPlayerTeam(testPurplePlayer), Game.PURPLE_TEAM_IDX);
		
		testGame2.runTestGame();
		
		StatAchievementUpdater testStatUpdater2 = new StatAchievementUpdater(testGame2);
		testStatUpdater2.updatesFromRecentGame(jdbcParams);
		
		assertEquals("Blue team won twice.", testBluePlayer.getTotalWins(), 2);
		assertEquals("Purple team lost both games.", testPurplePlayer.getTotalLosses(), 2);
		
		try {
			Connection testConn = null;

			try {
				
				testConn = DriverManager.getConnection(jdbcString, jdbcUser, jdbcPass);
				
				/*
				 * Grabs userName column for the name that we entered in the Player
				 * instantiation above.
				 */ 
				ResultSet testRS = testConn.prepareStatement(
						"select * from players where userName = 'TestBlueUpdatePlayer'")
						.executeQuery();
				testRS.next();
				
				assertEquals("This should be the name we just entered.", "TestBlueUpdatePlayer", testRS.getString(Player.NAME_IDX));
				assertEquals("This should be 20000, the length of both Games.", 20000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX), 0.0);
				assertEquals("This should indicate a second Victory, as above.", 2, testRS.getInt(Player.TOTAL_WINS_IDX));
				
				testRS.close();
				
				testRS = testConn.prepareStatement(
						"select * from players where userName = 'TestPurpleUpdatePlayer'")
						.executeQuery();
				testRS.next();
				
				assertEquals("This should be the name we just entered.", "TestPurpleUpdatePlayer", testRS.getString(Player.NAME_IDX));
				assertEquals("This should be 10000, the length of both Games.", 20000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX), 0.0);
				assertEquals("This should indicate both Losses.", 2, testRS.getInt(Player.TOTAL_LOSSES_IDX));
				
				testRS.close();
				
				testRS = testConn.prepareStatement("select count(*) from gamesPlayed").executeQuery();
				
				testRS.next();
				
				assertEquals("There should be exactly four entries: two games; two players.", 4, testRS.getInt(1));
				
				testRS.close();
				
				
			} catch (SQLException e) {
				System.out.println("Encountered some kind of SQL error (statement level): " + e.getMessage());
			} finally {
				testConn.close();
			}
			
		} catch (SQLException e) {
			System.out.println("Encountered some kind of SQL error (connection level): " + e.getMessage());
		} finally {
			
		}
		
	}
	
	@Test
	public void testAchievementCreationAndUpdate() {
		// Creates new player and inserts into database
		Player testPlayer = new Player("TestAchievementUser", jdbcParams);
		Player testPlayer2 = new Player("TestAchievementUser2", jdbcParams);
		
		for(int i = 0; i < testPlayer2.getPlayerAchievements().size(); i++) {
			assertEquals("Should be definitively false.", false, testPlayer2.getPlayerAchievements().get(i).getIsAchieved());
		}

		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select * from playerAchievements where userName = 'TestAchievementUser'")
						.executeQuery();
				
				if (testRS.next()) {

					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.SHARPSHOOTER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BRUISER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.VETERAN_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BIG_WINNER_DB_IDX));

					testRS.close();
				}

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		} finally {

		}
		
		ArrayList<Player> gamePlayers = new ArrayList<Player>();
		gamePlayers.add(testPlayer);
		gamePlayers.add(testPlayer2);
		
		Game testGame = new Game(gamePlayers,jdbcParams);
		
		testGame.runAchievementTestGame();
		
		StatAchievementUpdater updateAchieves = new StatAchievementUpdater(testGame);
		updateAchieves.updatesFromRecentGame(jdbcParams);
		
		assertTrue("Sharpshooter achieved by TestAchievementUser.", testPlayer.getPlayerAchievements().get(Player.SHARPSHOOTER_IDX).getIsAchieved());
		assertTrue("Brusier achieved by TestAchievementUser2.", testPlayer2.getPlayerAchievements().get(Player.BRUISER_IDX).getIsAchieved());
		assertFalse("Sharpshooter NOT achieved by TestAchievementUser2.", testPlayer2.getPlayerAchievements().get(Player.SHARPSHOOTER_IDX).getIsAchieved());
		assertFalse("Brusier NOT achieved by TestAchievementUser.", testPlayer.getPlayerAchievements().get(Player.BRUISER_IDX).getIsAchieved());
		
		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select * from playerAchievements where userName = 'TestAchievementUser'")
						.executeQuery();
				
				if (testRS.next()) {

					assertEquals("This should now be true!.", true,
							testRS.getBoolean(Player.SHARPSHOOTER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BRUISER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.VETERAN_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BIG_WINNER_DB_IDX));

					testRS.close();
				}
				
				testRS = testConn.prepareStatement("select * from playerAchievements where userName = 'TestAchievementUser2'").executeQuery();
				
				if(testRS.next()) {
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.SHARPSHOOTER_DB_IDX));
					assertEquals("This should now be true!", true,
							testRS.getBoolean(Player.BRUISER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.VETERAN_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BIG_WINNER_DB_IDX));

					testRS.close();
				}

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		} finally {

		}
		
		/*
		 * Now we run ANOTHER game, but hope that the Achievements are not awarded again.
		 */
		
		Game testGame2 = new Game(gamePlayers,jdbcParams);
		
		testGame2.runAchievementTestGame();
		
		StatAchievementUpdater updateAchieves2 = new StatAchievementUpdater(testGame2);
		updateAchieves2.updatesFromRecentGame(jdbcParams);
		
		/*
		 * Now reload the Player and make sure they still have their Achievements.
		 */
		
		Player reloadPlayer = new Player("TestAchievementUser");
	}
	
	@After
	public void tearDown() {
		if(hsqlServer != null) hsqlServer.stop();
	}

}
