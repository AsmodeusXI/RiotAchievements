package com.samlawton.riotdemo.unittest;

import static org.junit.Assert.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.hsqldb.Server;
import org.junit.*;

import com.samlawton.riotdemo.achievements.StatAchievementUpdater;
import com.samlawton.riotdemo.game.Game;
import com.samlawton.riotdemo.game.Player;

public class TestAchievements {

	private static Server hsqlServer = null;
	public static final String jdbcDriver = "org.hsqldb.jdbcDriver";
	public static final String jdbcString = "jdbc:hsqldb:mem:testdb";
	public static final String jdbcUser = "sa";
	public static final String jdbcPass = "";
	public static final String dbName = "testdb";
	public static final String[] jdbcParams = { jdbcDriver, jdbcString,
			jdbcUser, jdbcPass };

	/**
	 * Sets up an in-memory HSQL database that creates all the
	 * necessary tables to create and run a Game and give 
	 * Achievements.
	 */
	@BeforeClass
	public static void setUp() {

		hsqlServer = new Server();

		// HSQLDB prints out a lot of informations when
		// starting and closing, which we don't need now.
		// Normally you should point the setLogWriter
		// to some Writer object that could store the logs.
		hsqlServer.setLogWriter(null);
		hsqlServer.setSilent(true);

		// The actual database will be named 'xdb' and its
		// settings and data will be stored in files
		// testdb.properties and testdb.script
		hsqlServer.setDatabaseName(0, dbName);
		hsqlServer.setDatabasePath(0, "file:" + dbName);

		// Start the database!
		hsqlServer.start();

		try {
			Connection createEnv = null;

			try {

				Class.forName(jdbcDriver);

				createEnv = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				createEnv.prepareStatement(
						"create table players ("
								+ "userName varchar(64) not null primary key, "
								+ "userCreateDate varchar(128), "
								+ "totalGames integer, "
								+ "totalWins integer, "
								+ "totalLosses integer, "
								+ "totalAtkAttempts integer, "
								+ "totalHitNum double, " + "totalDmg integer, "
								+ "totalKills integer, "
								+ "totalFirstHitKills integer, "
								+ "totalAssists integer, "
								+ "totalSpellsCast integer, "
								+ "totalSpellDmg integer, "
								+ "totalPlayTime double " + ");").execute();
								//TODO: New player properties require an added column

				createEnv.prepareStatement(
						"create table games(gameID varchar(128) primary key,"
								+ "gameDate varchar(128),"
								+ "bluePlayerOne varchar(64),"
								+ "bluePlayerTwo varchar(64),"
								+ "bluePlayerThree varchar(64),"
								+ "bluePlayerFour varchar(64),"
								+ "bluePlayerFive varchar(64),"
								+ "purplePlayerOne varchar(64),"
								+ "purplePlayerTwo varchar(64),"
								+ "purplePlayerThree varchar(64),"
								+ "purplePlayerFour varchar(64),"
								+ "purplePlayerFive varchar(64),"
								+ "victor varchar(8)," + "loser varchar(8),"
								+ "totalKills integer,"
								+ "blueKills integer," + "purpleKills integer,"
								+ "blueAssists integer,"
								+ "purpleAssists integer,"
								+ "firstBloodTeam varchar(8),"
								+ "firstBloodPlayer varchar(64),"
								+ "gameLength double);").execute();
								// TODO: New game level properties require an added column

				createEnv
						.prepareStatement(
								"create table gamesPlayed(gamesPlayedID integer generated by default as identity(start with 1, increment by 1) primary key,"
										+ "userName varchar(64) not null,"
										+ "gameID varchar(128) not null);")
						.execute();

				createEnv
						.prepareStatement(
								"create table playerAchievements(achieveID integer generated by default as identity(start with 1, increment by 1) primary key, "
										+ "userName varchar(64) not null,"
										+ "ASharpshooter boolean,"
										+ "ABruiser boolean,"
										+ "AVeteran boolean,"
										+ "ABigWinner boolean)").execute();
										// TODO: New achievements require a new boolean column

			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				createEnv.close();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	/**
	 * Creates a user then checks to see if it can be recalled from the
	 * database.
	 */
	@Test
	public void testNewAndExistingPlayer() {

		// Creates new player and inserts into database
		Player testPlayer = new Player("TestUser", jdbcParams);

		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select userName from players where userName = 'TestUser'")
						.executeQuery();
				testRS.next();

				assertEquals("This should be the name we just entered.",
						"TestUser", testRS.getString(1));

				testRS.close();

				/*
				 * Creates a new player, but it should just be grabbing the old
				 * player. This will be proven if the create dates are the same.
				 */
				Player testDupPlayer = new Player("TestUser", jdbcParams);
				assertEquals(
						"This date should be the same if the users are the same.",
						testPlayer.getUserCreateDate(),
						testDupPlayer.getUserCreateDate());

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		}
	}

	@Test
	public void testUpdatePlayer() {

		Player testBluePlayer = new Player("TestBlueUpdatePlayer", jdbcParams);
		Player testPurplePlayer = new Player("TestPurpleUpdatePlayer",
				jdbcParams);

		ArrayList<Player> gamePlayers = new ArrayList<Player>();
		gamePlayers.add(testBluePlayer);
		gamePlayers.add(testPurplePlayer);

		Game testGame = new Game(gamePlayers, jdbcParams);

		assertEquals("Player 1 is not on Blue team.",
				testGame.getPlayerTeam(testBluePlayer), Game.BLUE_TEAM_IDX);
		assertEquals("Player 2 is not on Purple team.",
				testGame.getPlayerTeam(testPurplePlayer), Game.PURPLE_TEAM_IDX);

		testGame.runTestGame();

		StatAchievementUpdater testStatUpdater = new StatAchievementUpdater(
				testGame);
		testStatUpdater.updatesFromRecentGame(jdbcParams);

		try {

			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				ResultSet testRS = testConn.prepareStatement(
						"select * from games where gameID = '"
								+ testGame.getGameID() + "'").executeQuery();

				testRS.next();

				assertEquals("Blue Player 1 should be TestBlueUpdatePlayer.",
						"TestBlueUpdatePlayer",
						testRS.getString(Game.BLUE_PLAYER_ONE_IDX));
				assertEquals(
						"Purple Player 1 should be TestPurpleUpdatePlayer.",
						"TestPurpleUpdatePlayer",
						testRS.getString(Game.PURPLE_PLAYER_ONE_IDX));

				testRS.close();

				testRS = testConn.prepareStatement(
						"select count(*) from gamesPlayed").executeQuery();

				testRS.next();

				assertEquals(
						"There should be exactly two entries: one game; two players.",
						2, testRS.getInt(1));

				testRS.close();

			} catch (SQLException ex) {
				ex.printStackTrace();
			} finally {
				if (testConn != null)
					testConn.close();
			}

		} catch (SQLException ex) {
			ex.printStackTrace();
		}

		assertEquals("Blue team won last game.", testBluePlayer.getTotalWins(),
				1);
		assertEquals("Purple team lost last game.",
				testPurplePlayer.getTotalWins(), 0);

		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select * from players where userName = 'TestBlueUpdatePlayer'")
						.executeQuery();
				testRS.next();

				assertEquals("This should be the name we just entered.",
						"TestBlueUpdatePlayer",
						testRS.getString(Player.NAME_IDX));
				assertEquals(
						"This should be 10000, the length of the first Game.",
						10000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX),
						0.0);
				assertEquals("This should indicate a Victory, as above.", 1,
						testRS.getInt(Player.TOTAL_WINS_IDX));

				testRS.close();

				testRS = testConn
						.prepareStatement(
								"select * from players where userName = 'TestPurpleUpdatePlayer'")
						.executeQuery();
				testRS.next();

				assertEquals("This should be the name we just entered.",
						"TestPurpleUpdatePlayer",
						testRS.getString(Player.NAME_IDX));
				assertEquals(
						"This should be 10000, the length of the first Game.",
						10000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX),
						0.0);
				assertEquals("This should indicate a Loss, as above.", 0,
						testRS.getInt(Player.TOTAL_WINS_IDX));

				testRS.close();

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		}

		/*
		 * And then we do the whole thing once more and update again!
		 */

		Game testGame2 = new Game(gamePlayers, jdbcParams);

		assertEquals("Player 1 is not on Blue team again.",
				testGame2.getPlayerTeam(testBluePlayer), Game.BLUE_TEAM_IDX);
		assertEquals("Player 2 is not on Purple team again.",
				testGame2.getPlayerTeam(testPurplePlayer), Game.PURPLE_TEAM_IDX);

		testGame2.runTestGame();

		StatAchievementUpdater testStatUpdater2 = new StatAchievementUpdater(
				testGame2);
		testStatUpdater2.updatesFromRecentGame(jdbcParams);

		assertEquals("Blue team won twice.", testBluePlayer.getTotalWins(), 2);
		assertEquals("Purple team lost both games.",
				testPurplePlayer.getTotalLosses(), 2);

		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select * from players where userName = 'TestBlueUpdatePlayer'")
						.executeQuery();
				testRS.next();

				assertEquals("This should be the name we just entered.",
						"TestBlueUpdatePlayer",
						testRS.getString(Player.NAME_IDX));
				assertEquals("This should be 20000, the length of both Games.",
						20000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX),
						0.0);
				assertEquals(
						"This should indicate a second Victory, as above.", 2,
						testRS.getInt(Player.TOTAL_WINS_IDX));

				testRS.close();

				testRS = testConn
						.prepareStatement(
								"select * from players where userName = 'TestPurpleUpdatePlayer'")
						.executeQuery();
				testRS.next();

				assertEquals("This should be the name we just entered.",
						"TestPurpleUpdatePlayer",
						testRS.getString(Player.NAME_IDX));
				assertEquals("This should be 10000, the length of both Games.",
						20000.0, testRS.getDouble(Player.TOTAL_PLAY_TIME_IDX),
						0.0);
				assertEquals("This should indicate both Losses.", 2,
						testRS.getInt(Player.TOTAL_LOSSES_IDX));

				testRS.close();

				testRS = testConn.prepareStatement(
						"select count(*) from gamesPlayed").executeQuery();

				testRS.next();

				assertEquals(
						"There should be exactly four entries: two games; two players.",
						4, testRS.getInt(1));

				testRS.close();

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		}
	}

	@Test
	public void testAchievementCreationAndUpdate() {
		// Creates new player and inserts into database
		Player testPlayer = new Player("TestAchievementUser", jdbcParams);
		Player testPlayer2 = new Player("TestAchievementUser2", jdbcParams);

		for (int i = 0; i < testPlayer2.getPlayerAchievements().size(); i++) {
			assertEquals("Should be definitively false.", false, testPlayer2
					.getPlayerAchievements().get(i).getIsAchieved());
		}

		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select * from playerAchievements where userName = 'TestAchievementUser'")
						.executeQuery();

				if (testRS.next()) {

					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.SHARPSHOOTER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BRUISER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.VETERAN_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BIG_WINNER_DB_IDX));

					testRS.close();
				}

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		}

		ArrayList<Player> gamePlayers = new ArrayList<Player>();
		gamePlayers.add(testPlayer);
		gamePlayers.add(testPlayer2);

		Game testGame = new Game(gamePlayers, jdbcParams);

		testGame.runAchievementTestGame();

		StatAchievementUpdater updateAchieves = new StatAchievementUpdater(
				testGame);
		updateAchieves.updatesFromRecentGame(jdbcParams);

		assertTrue("Sharpshooter achieved by TestAchievementUser.", testPlayer
				.getPlayerAchievements().get(Player.SHARPSHOOTER_IDX)
				.getIsAchieved());
		assertTrue("Brusier achieved by TestAchievementUser2.", testPlayer2
				.getPlayerAchievements().get(Player.BRUISER_IDX)
				.getIsAchieved());
		assertFalse("Sharpshooter NOT achieved by TestAchievementUser2.",
				testPlayer2.getPlayerAchievements()
						.get(Player.SHARPSHOOTER_IDX).getIsAchieved());
		assertFalse("Brusier NOT achieved by TestAchievementUser.", testPlayer
				.getPlayerAchievements().get(Player.BRUISER_IDX)
				.getIsAchieved());

		try {
			Connection testConn = null;

			try {

				testConn = DriverManager.getConnection(jdbcString, jdbcUser,
						jdbcPass);

				/*
				 * Grabs userName column for the name that we entered in the
				 * Player instantiation above.
				 */
				ResultSet testRS = testConn
						.prepareStatement(
								"select * from playerAchievements where userName = 'TestAchievementUser'")
						.executeQuery();

				if (testRS.next()) {

					assertEquals("This should now be true!.", true,
							testRS.getBoolean(Player.SHARPSHOOTER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BRUISER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.VETERAN_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BIG_WINNER_DB_IDX));

					testRS.close();
				}

				testRS = testConn
						.prepareStatement(
								"select * from playerAchievements where userName = 'TestAchievementUser2'")
						.executeQuery();

				if (testRS.next()) {
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.SHARPSHOOTER_DB_IDX));
					assertEquals("This should now be true!", true,
							testRS.getBoolean(Player.BRUISER_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.VETERAN_DB_IDX));
					assertEquals("This should be false.", false,
							testRS.getBoolean(Player.BIG_WINNER_DB_IDX));

					testRS.close();
				}

			} catch (SQLException e) {
				System.out
						.println("Encountered some kind of SQL error (statement level): "
								+ e.getMessage());
			} finally {
				testConn.close();
			}

		} catch (SQLException e) {
			System.out
					.println("Encountered some kind of SQL error (connection level): "
							+ e.getMessage());
		}

		/*
		 * Now we run ANOTHER game, but hope that the Achievements are not
		 * awarded again.
		 */

		Game testGame2 = new Game(gamePlayers, jdbcParams);

		testGame2.runAchievementTestGame();

		StatAchievementUpdater updateAchieves2 = new StatAchievementUpdater(
				testGame2);
		updateAchieves2.updatesFromRecentGame(jdbcParams);

		/*
		 * Now reload the Player and make sure they still have their
		 * Achievements.
		 */

		Player reloadPlayer = new Player("TestAchievementUser", jdbcParams);

		assertTrue(
				"Sharpshooter STILL achieved by TestAchievementUser.",
				reloadPlayer.getPlayerAchievements()
						.get(Player.SHARPSHOOTER_IDX).getIsAchieved());
		assertFalse("Never actually achieved.", reloadPlayer
				.getPlayerAchievements().get(Player.BRUISER_IDX)
				.getIsAchieved());
	}
	
	@Test
	public void testRunGame() {
		
		Player bluePlayer1 = new Player("BluePlayer1", jdbcParams);
		Player bluePlayer2 = new Player("BluePlayer2", jdbcParams);
		Player bluePlayer3 = new Player("BluePlayer3", jdbcParams);
		Player bluePlayer4 = new Player("BluePlayer4", jdbcParams);
		Player bluePlayer5 = new Player("BluePlayer5", jdbcParams);
		Player purplePlayer1 = new Player("PurplePlayer1", jdbcParams);
		Player purplePlayer2 = new Player("PurplePlayer2", jdbcParams);
		Player purplePlayer3 = new Player("PurplePlayer3", jdbcParams);
		Player purplePlayer4 = new Player("PurplePlayer4", jdbcParams);
		Player purplePlayer5 = new Player("PurplePlayer5", jdbcParams);
		
		ArrayList<Player> gamePlayers = new ArrayList<Player>();
		gamePlayers.add(bluePlayer1);
		gamePlayers.add(purplePlayer1);
		gamePlayers.add(bluePlayer2);
		gamePlayers.add(purplePlayer2);
		gamePlayers.add(bluePlayer3);
		gamePlayers.add(purplePlayer3);
		gamePlayers.add(bluePlayer4);
		gamePlayers.add(purplePlayer4);
		gamePlayers.add(bluePlayer5);
		gamePlayers.add(purplePlayer5);
		
		// Running the first of three games
		Game gameOne = new Game(gamePlayers, jdbcParams);
		
		System.out.println("Running Game 1:");
		gameOne.runGame(jdbcParams);
		
		//gameOne.printAllStats();
		
		StatAchievementUpdater gameOneStats = new StatAchievementUpdater(gameOne);
		gameOneStats.updatesFromRecentGame(jdbcParams);
		
		// Running the second of three games
		Game gameTwo = new Game(gamePlayers, jdbcParams);
		
		System.out.println("Running Game 2:");
		gameTwo.runGame(jdbcParams);
		
		StatAchievementUpdater gameTwoStats = new StatAchievementUpdater(gameTwo);
		gameTwoStats.updatesFromRecentGame(jdbcParams);
		
		// Running the third of three games
		Game gameThree = new Game(gamePlayers, jdbcParams);
		
		System.out.println("Running Game 3:");
		gameThree.runGame(jdbcParams);
		
		StatAchievementUpdater gameThreeStats = new StatAchievementUpdater(gameThree);
		gameThreeStats.updatesFromRecentGame(jdbcParams);
		
		try {
			
			Connection connection = null;
			
			try {
				
				Class.forName(jdbcDriver);
				
				connection = DriverManager.getConnection(jdbcString, jdbcUser, jdbcPass);
				
				ResultSet gamesForBP1 = connection.prepareStatement("select gameID from gamesPlayed where userName = '" + bluePlayer1.getUserName() + "'").executeQuery();
				int rsIdx = 1;
				
				while(gamesForBP1.next()) {
					if(rsIdx == 1) {
						assertEquals("All three game IDs should be in here (game one).", gameOne.getGameID(), gamesForBP1.getString(1));
						rsIdx++;
					} else if (rsIdx == 2) {
						assertEquals("All three game IDs should be in here (game two).", gameTwo.getGameID(), gamesForBP1.getString(1));
						rsIdx++;
					} else if (rsIdx == 3) {
						assertEquals("All three game IDs should be in here (game three).", gameThree.getGameID(), gamesForBP1.getString(1));
						rsIdx++;
					} else {
						fail("We should not get this far (only three games played).");
					}
				}
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} finally {
				connection.close();
			}
			
		} catch(SQLException ex) {
			ex.printStackTrace();
		}
		
	}
	

	@After
	public void tearDown() {
		if (hsqlServer != null)
			hsqlServer.stop();
	}

}
